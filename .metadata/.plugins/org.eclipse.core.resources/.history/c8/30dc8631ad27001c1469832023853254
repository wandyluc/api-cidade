package br.com.cidade.wscidade.config;

import java.io.File;
import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;

import br.com.cidade.wscidade.entities.Cidade;
import br.com.cidade.wscidade.repositories.CidadeRepository;

@Component
public class DataLoader implements ApplicationRunner {

	private CidadeRepository repository;

	@Autowired
	public DataLoader(CidadeRepository repository) {
		this.repository = repository;
	}

	@Override
	public void run(ApplicationArguments args) throws Exception {

	}

	private List<Cidade> processarInputFile(File filePath) throws IOException {

		List<Cidade> cidades = new ArrayList<Cidade>();

		Reader reader = Files.newBufferedReader(Paths.get(filePath.toURI()));

		Iterable<CSVRecord> linhas = CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreHeaderCase().parse(reader);

		for (CSVRecord l : linhas) {
			Cidade item = new Cidade();
			item.setIbge_id(convertToLong(l.get(0)));
			item.setUf(l.get(1));
			item.setName(l.get(2));
			item.setCapital(convertToBoolean(l.get(3)));
			item.setLon(convertToBigDecimal(l.get(4)));
			item.setLat(convertToBigDecimal(l.get(5)));
			item.setNo_accents(l.get(6));
			item.setAlternative_names(l.get(7));
			item.setMicroregion(l.get(8));
			item.setMesoregion(l.get(9));
			cidades.add(item);
		}

		return cidades;
	}

	private Long convertToLong(Object param) {
		if (param != null) {
			return Long.valueOf(param.toString());
		}

		throw new RuntimeException("Não converte para long");
	}

	private Boolean convertToBoolean(Object param) {
		if (param != null) {
			return Boolean.TRUE;
		}

		return Boolean.FALSE;
	}

	private BigDecimal convertToBigDecimal(Object param) {
		if (param != null) {
			return new BigDecimal(param.toString());
		}

		throw new RuntimeException("Não converte para BigDecimal");
	}
}
