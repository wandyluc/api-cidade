package br.com.cidade.wscidade.services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import br.com.cidade.wscidade.dto.CidadeCapitalOrdenadaDTO;
import br.com.cidade.wscidade.dto.CidadeDTO;
import br.com.cidade.wscidade.dto.CidadeNomeDTO;
import br.com.cidade.wscidade.dto.EstadoMaisMenosCidadeDTO;
import br.com.cidade.wscidade.entities.Cidade;
import br.com.cidade.wscidade.enums.Coluna;
import br.com.cidade.wscidade.jpa.specification.CidadeSpecification;
import br.com.cidade.wscidade.repositories.CidadeRepository;
import br.com.cidade.wscidade.util.Utils;


@Service
public class CidadeService {

	@Autowired
	private CidadeRepository repository;
	
	public List<CidadeCapitalOrdenadaDTO> buscarCapitaisEmOrdemAlfabetica(){		
		return repository.buscarCapitaisEmOrdemAlfabetica();						
	}
	
	public List<EstadoMaisMenosCidadeDTO> buscarEstadoMaisMenosCidade(){
		
		List<EstadoMaisMenosCidadeDTO> estados = repository.quantidadeCidadePorEstado();
		List<EstadoMaisMenosCidadeDTO> retorno = new ArrayList<EstadoMaisMenosCidadeDTO>();
		
		EstadoMaisMenosCidadeDTO estadoMenosCidades = estados.stream().min(Comparator.comparing(EstadoMaisMenosCidadeDTO::getQuantidade)).orElseThrow(NoSuchElementException::new);
		retorno.add(estadoMenosCidades);
		
		EstadoMaisMenosCidadeDTO estadoMaisCidades = estados.stream().max(Comparator.comparing(EstadoMaisMenosCidadeDTO::getQuantidade)).orElseThrow(NoSuchElementException::new);
		retorno.add(estadoMaisCidades);
		
		return retorno;						
	}
	
	public Optional<EstadoMaisMenosCidadeDTO> buscarQuantidadeCidadePorEstado(String uf){
		
		List<EstadoMaisMenosCidadeDTO> estados = repository.quantidadeCidadePorEstado();
		
		if(Utils.isEmptyOrNull(uf)) {
			throw new RuntimeException("Estado nao encontrado");
		}
		
		return estados.stream().filter(l->l.getUf().equals(uf.toUpperCase())).findFirst();						
	}
	
	public Optional<CidadeDTO> buscaCidadePorIbge(Long ibge){		
		return repository.buscarCidadePorIbge(ibge);						
	}
	
	public List<CidadeNomeDTO> buscarCidadesPorEstado(String uf){
				
		if(Utils.isEmptyOrNull(uf)) {
			throw new RuntimeException("Estado nao encontrado");
		}

		return repository.buscarCidaderPorUF(uf.toUpperCase());						
	}
	
	public Optional<CidadeDTO> adicionaCidade(CidadeDTO dto) {
			if(!Utils.isEmptyOrNull(dto)) {
				Cidade cidade = new Cidade(dto.getIbgeId(), dto.getUf(), dto.getName(), dto.getCapital(), dto.getLon(), dto.getLat(), dto.getNoAccents(), dto.getAlternativeNames(), dto.getMicroregion(), dto.getMesoregion());					
				return Optional.ofNullable(new CidadeDTO(repository.saveAndFlush(cidade)));
			}else {
				return Optional.empty();
			}
		
	}
	
	public void deletarCidade(CidadeDTO dto) {
		if(!Utils.isEmptyOrNull(dto)) {
			Cidade cidade = new Cidade(dto.getIbgeId(), dto.getUf(), dto.getName(), dto.getCapital(), dto.getLon(), dto.getLat(), dto.getNoAccents(), dto.getAlternativeNames(), dto.getMicroregion(), dto.getMesoregion());					
			repository.delete(cidade);
		} else {
			throw new RuntimeException("NÃ£o foi possivel apagar a cidade");
		}
	}
	

	public List<CidadeDTO> filtroPorColuna(Coluna coluna, String filtro) {		
		List<Cidade> lista = repository.findAll(Specification.where(CidadeSpecification.filtragem(coluna, filtro)));
		List<CidadeDTO> retorno = lista.stream().map(x -> new CidadeDTO(x)).collect(Collectors.toList());
		return retorno;
	}
	
	public Map<String, Integer> qtdeRegistrosPorColuna(Coluna coluna) {		
		List<Cidade> lista = repository.findAll();
		
		Map<String, Integer> retorno = new HashMap<String, Integer>();
		
		switch(coluna) {
		case ALTERNATIVE_NAMES:
			Set<String> alternativeNames = lista.stream().map(Cidade::getAlternativeNames).collect(Collectors.toSet());
			retorno.put(coluna.getColuna(), alternativeNames.size());
		case CAPITAL:
			Set<Boolean> capital = lista.stream().map(Cidade::getCapital).collect(Collectors.toSet());
		case IBGE_ID:
			Set<Long> ibgeId = lista.stream().map(Cidade::getIbgeId).collect(Collectors.toSet());
		case LAT:
			Set<String> lat = lista.stream().map(Cidade::getLat).collect(Collectors.toSet());
		case LON:
			Set<String> lon = lista.stream().map(Cidade::getLon).collect(Collectors.toSet());
		case MESOREGION:
			Set<String> mesoregion = lista.stream().map(Cidade::getMesoregion).collect(Collectors.toSet());
		case MICROREGION:
			Set<String> microregion = lista.stream().map(Cidade::getMicroregion).collect(Collectors.toSet());
		case NAME:
			Set<String> name = lista.stream().map(Cidade::getName).collect(Collectors.toSet());
		case NO_ACCENTS:
			Set<String> noAccents = lista.stream().map(Cidade::getNoAccents).collect(Collectors.toSet());
		case UF:
			Set<String> uf = lista.stream().map(Cidade::getUf).collect(Collectors.toSet());
		
		}
		
		
		
		return retorno;
	}
	
	public Integer qtdeRegistrosTotal() {		
		List<Cidade> lista = repository.findAll();		
		return lista.size();
	}
	
}
